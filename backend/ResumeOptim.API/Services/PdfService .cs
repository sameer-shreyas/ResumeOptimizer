using System.Text.Json;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using ResumeOptim.API.DTOs;
using ResumeOptim.API.Models;

namespace ResumeOptim.API.Services
{
    public class PdfService : IPdfService
    {
        public byte[] GenerateReportPdf(AnalysisReport report)
        {
            // Register QuestPDF license
            QuestPDF.Settings.License = LicenseType.Community;

            // Deserialize JSON data from database
            var suggestions = Deserialize<List<SuggestionDto>>(report.Suggestions);
            var keywordMatches = Deserialize<List<string>>(report.KeywordMatches);
            var missingKeywords = Deserialize<List<string>>(report.MissingKeywords);

            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(11));

                    // Header
                    page.Header()
                        .Row(row =>
                        {
                            row.RelativeItem()
                                .AlignCenter()
                                .Text("Resume Analysis Report")
                                .Bold().FontSize(20).FontColor(Colors.Blue.Darken2);
                        });

                    // Content
                    page.Content()
                        .PaddingVertical(1, Unit.Centimetre)
                        .Column(column =>
                        {
                            column.Item().Text($"Analysis for: {report.UploadedFile?.FileName ?? "Unknown file"}");
                            column.Item().Text($"Date: {report.CreatedAt:g}");

                            // Score Section
                            column.Item().PaddingTop(10).Text($"Overall Score: {report.Score}/100")
                                .SemiBold().FontSize(16);

                            column.Item().Component(new ScoreMeterComponent(report.Score));

                            // Job Description
                            column.Item().PaddingTop(15).Text("Job Description")
                                .SemiBold().FontSize(16);
                            column.Item().PaddingTop(5).Text(report.JobDescription);

                            // Suggestions Section
                            column.Item().PaddingTop(15).Text("Suggestions")
                                .SemiBold().FontSize(16);

                            foreach (var suggestion in suggestions)
                            {
                                column.Item().PaddingTop(5).Row(row =>
                                {
                                    row.AutoItem().Width(10).Height(10).Background(GetSuggestionColor(suggestion));
                                    row.RelativeItem().PaddingLeft(5).Text($"{suggestion.Title}: {suggestion.Description}");
                                });
                            }

                            // Keyword Analysis
                            column.Item().PaddingTop(15).Text("Keyword Analysis")
                                .SemiBold().FontSize(16);

                            // Matched Keywords
                            column.Item().PaddingTop(5).Text("Matched Keywords:").FontColor(Colors.Green.Darken2);
                            column.Item().PaddingTop(2).Text(string.Join(", ", keywordMatches));

                            // Missing Keywords
                            column.Item().PaddingTop(10).Text("Missing Keywords:").FontColor(Colors.Red.Darken2);
                            column.Item().PaddingTop(2).Text(string.Join(", ", missingKeywords));
                        });

                    // Footer
                    page.Footer()
                        .AlignCenter()
                        .Text(x =>
                        {
                            x.Span("Generated by ResumeOptim - ");
                            x.CurrentPageNumber();
                            x.Span(" / ");
                            x.TotalPages();
                        });
                });
            });

            return document.GeneratePdf();
        }

        private string GetSuggestionColor(SuggestionDto suggestion)
        {
            return suggestion.Impact.ToLower() switch
            {
                "high" => Colors.Red.Lighten1,
                "medium" => Colors.Orange.Lighten1,
                _ => Colors.Blue.Lighten1
            };
        }

        private T Deserialize<T>(string json) where T : new()
        {
            if (string.IsNullOrWhiteSpace(json))
                return new T();

            try
            {
                return JsonSerializer.Deserialize<T>(json) ?? new T();
            }
            catch
            {
                return new T();
            }
        }
    }

    public class ScoreMeterComponent : IComponent
    {
        private readonly int _score;

        public ScoreMeterComponent(int score)
        {
            _score = score;
        }

        public void Compose(IContainer container)
        {
            container.PaddingBottom(10).Row(row =>
            {
                row.RelativeItem().Height(20).Background(Colors.Grey.Lighten3)
                    .AlignCenter().Text($"{_score}%")
                    .FontSize(16).Bold();
            });
        }
    }
}